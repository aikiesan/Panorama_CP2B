"""
Page 2: Par√¢metros Qu√≠micos e Operacionais
CP2B - Chemical composition analysis with literature ranges
"""

import streamlit as st
import pandas as pd

from src.data.residue_registry import (
    get_available_residues,
    get_residue_data,
    get_residue_icon
)
from src.ui.tabs import render_sector_tabs
from src.ui.horizontal_nav import render_horizontal_nav
from src.ui.main_navigation import render_main_navigation, render_navigation_divider


# ============================================================================
# PAGE CONFIGURATION
# ============================================================================

st.set_page_config(
    page_title="Par√¢metros Qu√≠micos - CP2B",
    page_icon="üß™",
    layout="wide",
    initial_sidebar_state="expanded"
)


# ============================================================================
# HEADER
# ============================================================================

def render_header():
    """Render header for chemical parameters page"""
    st.markdown("""
    <div style='background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white; padding: 2.5rem; margin: -1rem -1rem 2rem -1rem;
                text-align: center; border-radius: 0 0 25px 25px;
                box-shadow: 0 8px 32px rgba(0,0,0,0.2);'>
        <h1 style='margin: 0; font-size: 2.8rem; font-weight: 700; letter-spacing: -0.5px;'>
            üß™ Par√¢metros Qu√≠micos e Operacionais
        </h1>
        <p style='margin: 15px 0 0 0; font-size: 1.3rem; opacity: 0.95; font-weight: 300;'>
            Composi√ß√£o Qu√≠mica ‚Ä¢ BMP ‚Ä¢ Par√¢metros Operacionais
        </p>
        <div style='margin-top: 15px; font-size: 0.95rem; opacity: 0.8;'>
            üìä Valores de Literatura ‚Ä¢ üìà Ranges Validados ‚Ä¢ ‚öóÔ∏è Metodologia Conservadora
        </div>
    </div>
    """, unsafe_allow_html=True)


# ============================================================================
# CHEMICAL PARAMETERS DISPLAY WITH RANGES
# ============================================================================

def render_chemical_parameters_table(chemical_params):
    """Display chemical parameters in table format with MIN/MEAN/MAX"""
    st.markdown("### üß¨ Par√¢metros de Composi√ß√£o (Literatura Validada)")

    st.info("""
    **üìä Como interpretar a tabela:**
    - **M√≠nimo**: Valor m√≠nimo encontrado na literatura revisada
    - **M√©dia/Valor**: Valor conservador adotado no CP2B (baseado em m√©dia ponderada)
    - **M√°ximo**: Valor m√°ximo encontrado na literatura revisada
    - **Unidade**: Unidade de medida do par√¢metro
    """)

    # Get table data from the model
    ranges_data = chemical_params.to_range_table()

    if ranges_data:
        df = pd.DataFrame(ranges_data)

        # Style the dataframe
        st.dataframe(
            df,
            hide_index=True,
            width="stretch",
            height=500,
            column_config={
                "Par√¢metro": st.column_config.TextColumn("Par√¢metro", width="medium"),
                "M√≠nimo": st.column_config.TextColumn("M√≠nimo", width="small"),
                "M√©dia/Valor": st.column_config.TextColumn("M√©dia/Valor ‚úÖ", width="small"),
                "M√°ximo": st.column_config.TextColumn("M√°ximo", width="small"),
                "Unidade": st.column_config.TextColumn("Unidade", width="small"),
            }
        )

        # Show key metrics in columns
        st.markdown("#### üìå Destaques")

        col1, col2, col3, col4 = st.columns(4)

        with col1:
            st.metric(
                "üí® BMP",
                f"{chemical_params.bmp:.2f}",
                help=f"Potencial Metanog√™nico\n{chemical_params.bmp_unit}"
            )
            st.caption(chemical_params.bmp_unit)

        with col2:
            st.metric(
                "üíß Umidade",
                f"{chemical_params.moisture:.1f}%",
                help="Conte√∫do de umidade do res√≠duo"
            )

        with col3:
            st.metric(
                "üì¶ S√≥lidos Totais",
                f"{chemical_params.ts:.1f}%",
                help="Total de s√≥lidos (base √∫mida)"
            )

        with col4:
            st.metric(
                "üî• S√≥lidos Vol√°teis",
                f"{chemical_params.vs:.1f}%",
                help=f"Fra√ß√£o vol√°til\n{chemical_params.vs_basis}"
            )
    else:
        st.warning("Nenhum dado de composi√ß√£o qu√≠mica dispon√≠vel")


# ============================================================================
# OPERATIONAL PARAMETERS DISPLAY WITH RANGES
# ============================================================================

def render_operational_parameters_table(operational):
    """Display operational parameters in table format with MIN/MEAN/MAX"""
    st.markdown("### üîß Par√¢metros Operacionais para Biodigest√£o")

    st.info("""
    **‚öóÔ∏è Par√¢metros recomendados para opera√ß√£o de biodigestores anaer√≥bios:**
    - **M√≠nimo/M√°ximo**: Limites operacionais encontrados na literatura
    - **Valor Operacional**: Condi√ß√£o √≥tima recomendada para este res√≠duo
    """)

    # Get table data from the model
    ranges_data = operational.to_range_table()

    if ranges_data:
        df = pd.DataFrame(ranges_data)

        st.dataframe(
            df,
            hide_index=True,
            width="stretch",
            height=300,
            column_config={
                "Par√¢metro": st.column_config.TextColumn("Par√¢metro", width="medium"),
                "M√≠nimo": st.column_config.TextColumn("M√≠nimo", width="small"),
                "Valor Operacional": st.column_config.TextColumn("Valor Operacional ‚úÖ", width="medium"),
                "M√°ximo": st.column_config.TextColumn("M√°ximo", width="small"),
            }
        )

        # Show key operational metrics
        col1, col2, col3 = st.columns(3)

        with col1:
            st.metric(
                "‚è±Ô∏è TRH",
                operational.hrt,
                help="Tempo de Reten√ß√£o Hidr√°ulica"
            )

        with col2:
            st.metric(
                "üå°Ô∏è Temperatura",
                operational.temperature,
                help="Temperatura operacional do biodigestor"
            )

        with col3:
            if operational.reactor_type:
                st.metric(
                    "‚öóÔ∏è Tipo de Reator",
                    operational.reactor_type,
                    help="Configura√ß√£o recomendada"
                )
    else:
        st.warning("Nenhum par√¢metro operacional dispon√≠vel")


# ============================================================================
# MAIN RENDER
# ============================================================================

def main():
    """Main page render function"""
    render_header()

    # Main navigation bar
    render_main_navigation(current_page="parametros")
    render_navigation_divider()

    # Horizontal navigation tabs
    render_horizontal_nav("Parametros")

    # Simple tab navigation (replaces complex cards)
    selected_sector, selected_residue = render_sector_tabs(key_prefix="parametros")

    if not selected_residue:
        st.info("üëÜ Selecione um setor e res√≠duo acima para visualizar os dados")

        # Show instructions
        st.markdown("---")
        st.markdown("### üìö Sobre os Par√¢metros Qu√≠micos")

        col1, col2 = st.columns(2)

        with col1:
            st.markdown("""
            #### üß¨ Composi√ß√£o Qu√≠mica

            A composi√ß√£o qu√≠mica √© fundamental para entender o potencial de produ√ß√£o de biog√°s de cada res√≠duo.

            **Par√¢metros principais:**
            - **BMP** (Biochemical Methane Potential): Potencial metanog√™nico
            - **ST/SV** (S√≥lidos Totais/Vol√°teis): Conte√∫do org√¢nico
            - **C:N** (Rela√ß√£o Carbono:Nitrog√™nio): Equil√≠brio nutricional
            - **Nutrientes** (N, P, K): Composi√ß√£o do biofertilizante

            Os valores apresentados s√£o baseados em **revis√£o sistem√°tica da literatura cient√≠fica**,
            com foco em estudos brasileiros e contexto tropical.
            """)

        with col2:
            st.markdown("""
            #### üîß Par√¢metros Operacionais

            Os par√¢metros operacionais definem as condi√ß√µes √≥timas para biodigest√£o.

            **Principais par√¢metros:**
            - **TRH**: Tempo de Reten√ß√£o Hidr√°ulica (dias)
            - **Temperatura**: Mesof√≠lico (30-37¬∞C) ou Termof√≠lico (50-60¬∞C)
            - **TCO**: Taxa de Carga Org√¢nica (kg SV/m¬≥/dia)
            - **Tipo de Reator**: CSTR, UASB, Batch, etc.

            **üìä Ranges MIN/MEAN/MAX:**
            Os ranges mostram a variabilidade encontrada na literatura, permitindo
            entender a robustez do processo e adaptar para condi√ß√µes locais.
            """)

        st.markdown("---")
        st.markdown("### üî¨ Valida√ß√£o Laboratorial")

        st.info("""
        **Tem dados de laborat√≥rio?** Use a **[Ferramenta de Compara√ß√£o Laboratorial](/üî¨_Comparacao_Laboratorial)**
        para validar seus resultados comparando com os valores de refer√™ncia da literatura!

        A ferramenta calcula desvios automaticamente e indica se seus dados est√£o dentro da faixa esperada.
        """)

        return

    st.markdown("---")

    # Load residue data
    residue_data = get_residue_data(selected_residue)

    if not residue_data:
        st.error("‚ö†Ô∏è Dados n√£o encontrados")
        return

    # Render all sections
    render_chemical_parameters_table(residue_data.chemical_params)

    st.markdown("---")

    render_operational_parameters_table(residue_data.operational)

    st.markdown("---")

    # Link to lab comparison tool
    st.markdown("### üî¨ Pr√≥ximo Passo: Valida√ß√£o Laboratorial")

    col1, col2, col3 = st.columns([2, 1, 2])

    with col2:
        if st.button("üî¨ Ir para Compara√ß√£o Laboratorial", width="stretch", type="primary"):
            st.switch_page("pages/4_üî¨_Comparacao_Laboratorial.py")

    st.info("üí° **Dica:** Use a ferramenta de compara√ß√£o laboratorial para validar seus dados experimentais com os valores de refer√™ncia apresentados acima!")


if __name__ == "__main__":
    main()
